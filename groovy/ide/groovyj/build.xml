<project name="GroovyJ" default="build.all" basedir=".">

    <target name="check.ant.version">
        <echo taskname="ant.version" message="${ant.version}"/>
        <condition property="ant.version.ok">
            <or>
                <contains string="${ant.version}" substring="1.6.2" casesensitive="false"/>
            </or>
        </condition>
    </target>

    <target name="ant.version.pass" depends="check.ant.version" unless="ant.version.ok">
        <fail>This build script requires Ant 1.6.2 or later!</fail>
    </target>

    <target name="initialise" depends="ant.version.pass">
        <property file="project.properties"/>
        <property name="distfile.name" value="${project.name}-${project.version}"/>
        <property name="binary.extensions" value="**/*.png, **/*.jpg, **/*.jpeg, **/*.gif"/>

        <property name="src.etc.dir" value="src/etc"/>
        <property name="src.java.dir" value="src/java"/>
        <property name="src.test.dir" value="src/test"/>

        <property name="lib.dir" value="lib"/>
        <property name="lib.compile.dir" value="${lib.dir}/compile"/>
        <property name="lib.runtime.dir" value="${lib.dir}/runtime"/>

        <property name="build.dir" value="build"/>
        <property name="classes.dir" value="${build.dir}/classes"/>
        <property name="dist.dir" value="${build.dir}/dist"/>
        <property name="test.classes.dir" value="${build.dir}/test-classes"/>
        <property name="test.results.dir" value="${build.dir}/test-results"/>
        <property name="test.reports.dir" value="${build.dir}/test-reports"/>

        <property name="irida.home" value="${lib.compile.dir}/irida"/>
        <property name="irida.classes.dir" value="${classes.dir}/irida"/>
        <property name="irida.test.classes.dir" value="${test.classes.dir}/irida"/>

        <property name="clover.dir" value="clover"/>
        <property name="clover.lib.dir" value="${user.home}/.ant/lib"/>
        <property name="clover.reports" value="${build.dir}/clover-reports"/>
        <property name="coverage.criteria" value="98%"/>

        <path id="clover.classpath">
            <pathelement location="${clover.lib.dir}/clover-1.3.5.jar"/>
        </path>

        <condition property="clover.available">
            <and>
                <available classname="com.cenqua.clover.tasks.CloverTask" classpathref="clover.classpath"/>
                <available file="${clover.lib.dir}/clover.license" type="file"/>
            </and>
        </condition>

        <path id="compile.classpath">
            <fileset dir="${lib.compile.dir}">
                <include name="**/*.jar"/>
                <exclude name="irida/**/*.jar"/>
            </fileset>
            <fileset dir="${lib.runtime.dir}">
                <include name="**/*.jar"/>
            </fileset>
        </path>

        <path id="irida.compile.classpath">
            <fileset dir="${irida.home}">
				<include name="lib/*.jar"/>
            </fileset>
            <pathelement location="${irida.classes.dir}"/>
            <path refid="compile.classpath"/>
        </path>

        <path id="irida.test.classpath">
            <pathelement location="${irida.test.classes.dir}"/>
            <path refid="clover.classpath"/>
            <path refid="irida.compile.classpath"/>
        </path>

        <filterset id="project.variables">
            <filter token="PROJECT.NAME" value="${project.name}"/>
            <filter token="PROJECT.HOMEPAGE" value="${project.homepage}"/>
            <filter token="PROJECT.TITLE" value="${project.title}"/>
            <filter token="PROJECT.VERSION" value="${project.version}"/>
            <filter token="PROJECT.DESCRIPTION" value="${project.description}"/>
            <filter token="PROJECT.CHANGE-NOTES" value="${project.change-notes}"/>
            <filter token="PROJECT.VENDOR" value="${project.vendor}"/>
            <filter token="PROJECT.VENDOR.EMAIL" value="${project.vendor.email}"/>
            <filter token="PROJECT.VENDOR.HOMEPAGE" value="${project.vendor.homepage}"/>
        </filterset>

        <tstamp>
            <format property="TODAY" pattern="d-MMMM-yyyy" locale="en"/>
            <format property="DAY" pattern="d" locale="en"/>
            <format property="MONTH" pattern="MM" locale="en"/>
            <format property="YEAR" pattern="yyyy" locale="en"/>
        </tstamp>

        <filterset id="timestamp.variables">
            <filter token="TIMESTAMP" value="${TODAY}"/>
            <filter token="DAY" value="${DAY}"/>
            <filter token="MONTH" value="${MONTH}"/>
            <filter token="YEAR" value="${YEAR}"/>
        </filterset>
    </target>

    <target name="check.irida.available" depends="initialise" >
        <available property="irida.available"
                   classname="com.intellij.lang.Language"
                   classpathref="irida.test.classpath"/>
    </target>

    <target name="irida.available" depends="check.irida.available" unless="irida.available">
		<fail>IntelliJ IDEA (Irida) is not available. Please either start with 'ant -Dirida.home=/path/to/irida' or copy
	$IDEA_HOME/lib/extensions.jar, 
	$IDEA_HOME/lib/forms_rt.jar, 
	$IDEA_HOME/lib/idea.jar,
	$IDEA_HOME/lib/openapi.jar, 
	$IDEA_HOME/lib/picocontainer.jar and 
	$IDEA_HOME/lib/trove4j.jar to
${irida.home}/lib.
        </fail>
    </target>

    <target name="clean" depends="initialise" description="Deletes all artifacts from a previous build">
        <delete dir="${build.dir}" failonerror="false"/>
    </target>

    <target name="compile.irida" depends="irida.available">
        <mkdir dir="${irida.classes.dir}"/>
        <javac srcdir="${src.java.dir}" destdir="${irida.classes.dir}" debug="on">
            <classpath refid="irida.compile.classpath"/>
        </javac>
        <copy todir="${irida.classes.dir}" overwrite="true" preservelastmodified="true">
            <fileset dir="${src.etc.dir}" includes="${binary.extensions}"/>
        </copy>
    </target>

    <target name="compile.tests.irida" depends="compile.irida">
        <mkdir dir="${irida.test.classes.dir}"/>
        <javac srcdir="${src.test.dir}" destdir="${irida.test.classes.dir}" debug="on">
            <classpath refid="irida.test.classpath"/>
        </javac>
    </target>

    <target name="test.irida" depends="compile.tests.irida">
        <mkdir dir="${test.results.dir}"/>

        <junit fork="true" forkmode="once" errorProperty="tests.failed" failureProperty="tests.failed"
               haltonfailure="false" haltonerror="false" showoutput="true" printsummary="withOutAndErr"
               includeantruntime="true" newenvironment="false">

            <classpath refid="irida.test.classpath"/>
            <formatter type="brief" usefile="false"/>

            <batchtest todir="${test.results.dir}">
                <fileset dir="${irida.test.classes.dir}">
                    <include name="**/*Test.class"/>
                    <include name="**/Create*TestCase.class"/>
                </fileset>
                <formatter type="xml"/>
            </batchtest>
        </junit>
    </target>

    <target name="test.reports.irida" depends="test.irida">
        <mkdir dir="${test.reports.dir}"/>

        <junitreport todir="${test.results.dir}">
            <fileset dir="${test.results.dir}">
                <include name="TEST-*.xml"/>
            </fileset>
            <report format="frames" todir="${test.reports.dir}"/>
        </junitreport>

        <fail message="Tests failed! Check test reports." if="tests.failed"/>
    </target>

    <target name="with.clover" depends="initialise" if="clover.available">
        <taskdef resource="clovertasks"/>

        <mkdir dir="${clover.dir}"/>
        <delete failonerror="true">
            <fileset dir="${clover.dir}" includes="clover.db*"/>
        </delete>

        <clover-setup enabled="true" initString="${clover.dir}/clover.db">
            <fileset dir="${src.java.dir}" includes="**/*.java"/>
        </clover-setup>
    </target>

    <target name="without.clover" depends="initialise" if="clover.available">
        <taskdef resource="clovertasks"/>
        <clover-setup enabled="false"/>
    </target>

    <target name="coverage.reports" depends="with.clover" if="clover.available">
        <!-- generate a history point for the current coverage -->
        <clover-historypoint historyDir="${clover.dir}/history"/>

        <clover-report>
            <!-- generate a current report -->
            <current alwaysReport="true" outfile="${clover.reports}" title="Clover Report for GroovyJ">
                <format type="html"/>
            </current>

            <!-- generate a historical report -->
            <historical outfile="${clover.reports}" historyDir="${clover.dir}/history">
                <format type="html"/>
            </historical>
        </clover-report>
    </target>

    <target name="clover.check" depends="with.clover" if="clover.available">
        <clover-check target="${coverage.criteria}" failureProperty="clover.check.failed"/>
    </target>

    <target name="coverage.check" depends="clover.check" if="clover.check.failed">
        <fail message="Coverage criteria not met! Check coverage reports."/>
    </target>

    <target name="jar.irida" depends="compile.irida" description="Packages up the plug-in as a jar file for IDEA Irida">
        <copy todir="${irida.classes.dir}" overwrite="true" preservelastmodified="true">
            <fileset dir="${src.etc.dir}" excludes="styles/**/*, ${binary.extensions}, **/*.xcf"/>
            <filterset>
                <filter token="PROJECT.IDEA.SINCE-BUILD" value="3245"/>
                <filter token="PROJECT.IDEA.UNTIL-BUILD" value="3245"/>
            </filterset>
            <filterset refid="project.variables"/>
            <filterset refid="timestamp.variables"/>
        </copy>

        <mkdir dir="${dist.dir}"/>
        <jar basedir="${irida.classes.dir}" compress="true" update="true" destfile="${dist.dir}/${distfile.name}-irida.jar"/>
    </target>

    <target name="zip.irida" depends="initialise" description="Packages up the plug-in as a deployable zip file for IntelliJ IDEA (Irida)">
        <delete failonerror="true">
            <fileset dir="${irida.classes.dir}" includes="**/*.class"/>
        </delete>

        <antcall inheritall="true" target="jar.irida"/>

        <zip compress="true" update="true" destfile="${dist.dir}/${distfile.name}-irida.zip">
            <zipfileset prefix="${project.name}/lib" file="${dist.dir}/${distfile.name}-irida.jar"/>
            <zipfileset prefix="${project.name}/lib" dir="${lib.runtime.dir}"/>
        </zip>

        <delete file="${dist.dir}/${distfile.name}-irida.jar"/>
    </target>

    <target name="build.all" description="Creates all installable plug-in distributions"
            depends="clean, with.clover, test.reports.irida, coverage.reports, coverage.check, without.clover, zip.irida">
        <buildnumber/>
    </target>

    <target name="deploy.irida" depends="zip.irida" if="irida.plugins.dir"
            description="Deploys the plug-in into an IntelliJ IDEA installation">
        <delete dir="${irida.plugins.dir}/${project.name}" failonerror="true"/>
        <unzip src="${dist.dir}/${distfile.name}-irida.zip" dest="${irida.plugins.dir}"/>
    </target>

    <target name="allow.interactive.plugin.dev" depends="initialise" if="irida.plugins.dir"
            description="small helper to delete jars from the plugin lib dir that are deployed through
                         the internal plugin devkit but are in the way when running the plugin (ClassCastException)">
        <delete quiet="true">
            <fileset dir="${irida.plugins.dir}/${project.name}/lib" includes="irida.jar, openapi.jar" />
        </delete>
    </target>

</project>
