/* The following code was generated by JFlex 1.4 on 1/27/05 11:07 PM */

/* It's an automatically generated code. Do not modify it. */
package groovy.idesupport.idea;

import com.intellij.lexer.Lexer;
import com.intellij.psi.tree.IElementType;


/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.4
 * on 1/27/05 11:07 PM from the specification file
 * <tt>JavaScript.flex</tt>
 */
class _JavaScriptLexer implements Lexer, Cloneable {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int DIV = 1;

  /**
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  4,  7,  0,  4,  7,  0,  0,
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     4, 38, 15,  0,  1, 45, 42, 13, 46, 47,  6, 39, 53, 12, 10,  5,
     8,  2,  2,  2,  2,  2,  2,  2,  2,  2, 56, 52, 40, 37, 41, 55,
     0,  3,  3,  3,  3, 11,  3,  1,  1,  1,  1,  1,  1,  1,  1,  1,
     1,  1,  1,  1,  1,  1,  1,  1,  9,  1,  1, 50, 14, 51, 44,  1,
     0, 22, 26, 28, 32, 20, 21, 16, 29, 31,  1, 27, 23, 16, 25, 30,
    35,  1, 18, 24, 17, 19, 36, 34,  9, 33,  1, 48, 43, 49, 54,  0
  };

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\1\5\1\6\1\3"+
    "\1\7\1\10\2\11\14\2\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\2\3\1\5\1\37\1\40\1\5\1\41\1\3"+
    "\1\42\1\43\3\11\17\2\1\44\1\45\1\2\1\46"+
    "\4\2\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\40"+
    "\1\65\1\3\1\5\2\40\1\66\1\40\1\2\1\67"+
    "\7\2\1\70\3\2\1\71\10\2\1\72\1\2\1\73"+
    "\1\74\1\75\1\76\1\77\1\66\1\5\1\0\4\66"+
    "\1\100\1\2\1\101\2\2\1\102\4\2\1\103\2\2"+
    "\1\104\4\2\1\105\1\106\1\107\1\66\2\40\1\5"+
    "\1\0\1\110\3\2\1\111\2\2\1\112\1\113\3\2"+
    "\1\114\1\115\1\116\2\2\1\117\4\2\1\120\2\2"+
    "\1\121\1\122\1\123\2\2\1\124";

  private static int [] zzUnpackAction() {
    int [] result = new int[197];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\71\0\162\0\253\0\344\0\u011d\0\u0156\0\u018f"+
    "\0\u01c8\0\u0201\0\u023a\0\u0273\0\u02ac\0\u02e5\0\u031e\0\u0357"+
    "\0\u0390\0\u03c9\0\u0402\0\u043b\0\u0474\0\u04ad\0\u04e6\0\u051f"+
    "\0\u0558\0\u0591\0\u05ca\0\u0603\0\u063c\0\u0675\0\u06ae\0\u06e7"+
    "\0\u0720\0\u0759\0\162\0\162\0\162\0\162\0\162\0\162"+
    "\0\162\0\162\0\162\0\162\0\162\0\u0792\0\u07cb\0\u0804"+
    "\0\u083d\0\u0876\0\u08af\0\u08e8\0\162\0\u0921\0\162\0\162"+
    "\0\162\0\u095a\0\u0993\0\u09cc\0\u0a05\0\u0a3e\0\u0a77\0\u0ab0"+
    "\0\u0ae9\0\u0b22\0\u0b5b\0\u0b94\0\u0bcd\0\u0c06\0\u0c3f\0\u0c78"+
    "\0\u0cb1\0\u0cea\0\253\0\u0d23\0\u0d5c\0\253\0\u0d95\0\u0dce"+
    "\0\u0e07\0\u0e40\0\u0e79\0\u0eb2\0\162\0\162\0\162\0\u0eeb"+
    "\0\162\0\u0f24\0\162\0\162\0\162\0\162\0\162\0\162"+
    "\0\u0f5d\0\162\0\u0f96\0\u0fcf\0\u1008\0\u1041\0\u107a\0\u10b3"+
    "\0\u10ec\0\253\0\u1125\0\u115e\0\u1197\0\u11d0\0\u1209\0\u1242"+
    "\0\u127b\0\253\0\u12b4\0\u12ed\0\u1326\0\253\0\u135f\0\u1398"+
    "\0\u13d1\0\u140a\0\u1443\0\u147c\0\u14b5\0\u14ee\0\253\0\u1527"+
    "\0\162\0\162\0\162\0\162\0\u1560\0\u1599\0\u15d2\0\u160b"+
    "\0\u1644\0\u0fcf\0\u167d\0\u16b6\0\253\0\u16ef\0\253\0\u1728"+
    "\0\u1761\0\253\0\u179a\0\u17d3\0\u180c\0\u1845\0\253\0\u187e"+
    "\0\u18b7\0\253\0\u18f0\0\u1929\0\u1962\0\u199b\0\253\0\253"+
    "\0\162\0\162\0\u0fcf\0\162\0\u19d4\0\u1a0d\0\253\0\u1a46"+
    "\0\u1a7f\0\u1ab8\0\253\0\u1af1\0\u1b2a\0\253\0\253\0\u1b63"+
    "\0\u1b9c\0\u1bd5\0\253\0\253\0\253\0\u1c0e\0\u1c47\0\253"+
    "\0\u1c80\0\u1cb9\0\u1cf2\0\u1d2b\0\253\0\u1d64\0\u1d9d\0\253"+
    "\0\253\0\253\0\u1dd6\0\u1e0f\0\253";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[197];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\4\1\6\1\7\1\10\1\6"+
    "\1\11\1\4\1\12\1\4\1\13\1\14\1\3\1\15"+
    "\1\4\1\16\1\17\1\4\1\20\1\21\2\4\1\22"+
    "\1\23\1\24\1\4\1\25\2\4\1\26\1\27\1\4"+
    "\1\30\1\4\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\3"+
    "\1\4\1\5\1\4\1\6\1\56\1\10\1\6\1\11"+
    "\1\4\1\12\1\4\1\13\1\14\1\3\1\15\1\4"+
    "\1\16\1\17\1\4\1\20\1\21\2\4\1\22\1\23"+
    "\1\24\1\4\1\25\2\4\1\26\1\27\1\4\1\30"+
    "\1\4\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\72\0\3\4"+
    "\4\0\2\4\1\0\1\4\4\0\25\4\26\0\1\5"+
    "\5\0\1\5\1\0\1\57\1\60\10\0\1\60\50\0"+
    "\1\6\2\0\1\6\61\0\5\61\1\62\1\63\1\0"+
    "\6\61\1\64\52\61\45\0\1\65\25\0\1\5\5\0"+
    "\1\5\1\66\1\57\1\60\10\0\1\60\46\0\1\57"+
    "\5\0\1\57\74\0\1\67\30\0\1\70\23\0\7\14"+
    "\1\0\5\14\1\71\1\72\52\14\7\15\1\0\6\15"+
    "\1\73\1\71\51\15\1\0\3\4\4\0\2\4\1\0"+
    "\1\4\4\0\2\4\1\74\12\4\1\75\3\4\1\76"+
    "\3\4\25\0\3\4\4\0\2\4\1\0\1\4\4\0"+
    "\4\4\1\77\20\4\25\0\3\4\4\0\2\4\1\0"+
    "\1\4\4\0\7\4\1\100\15\4\25\0\3\4\4\0"+
    "\2\4\1\0\1\4\4\0\3\4\1\101\2\4\1\102"+
    "\7\4\1\103\1\104\5\4\25\0\3\4\4\0\2\4"+
    "\1\0\1\4\4\0\22\4\1\105\2\4\25\0\3\4"+
    "\4\0\2\4\1\0\1\4\4\0\3\4\1\106\1\107"+
    "\20\4\25\0\3\4\4\0\2\4\1\0\1\4\4\0"+
    "\2\4\1\110\22\4\25\0\3\4\4\0\2\4\1\0"+
    "\1\4\4\0\6\4\1\111\7\4\1\112\6\4\25\0"+
    "\3\4\4\0\2\4\1\0\1\4\4\0\5\4\1\113"+
    "\3\4\1\114\13\4\25\0\3\4\4\0\2\4\1\0"+
    "\1\4\4\0\4\4\1\115\11\4\1\116\6\4\25\0"+
    "\3\4\4\0\2\4\1\0\1\4\4\0\15\4\1\117"+
    "\1\4\1\120\5\4\25\0\3\4\4\0\2\4\1\0"+
    "\1\4\4\0\6\4\1\121\7\4\1\122\6\4\71\0"+
    "\1\123\70\0\1\124\70\0\1\125\1\0\1\126\66\0"+
    "\1\127\2\0\1\130\65\0\1\131\3\0\1\132\64\0"+
    "\1\133\4\0\1\134\63\0\1\135\5\0\1\136\62\0"+
    "\1\137\70\0\1\140\30\0\1\62\1\141\36\0\1\142"+
    "\25\0\1\57\5\0\1\57\2\0\1\60\10\0\1\60"+
    "\46\0\1\143\5\0\1\143\3\0\1\143\32\0\1\143"+
    "\21\0\5\61\1\144\1\61\1\0\6\61\1\64\52\61"+
    "\7\62\1\0\61\62\5\145\1\146\1\147\1\146\6\145"+
    "\1\150\52\145\7\61\1\0\6\61\1\64\52\61\2\0"+
    "\2\66\4\0\1\66\2\0\1\66\10\0\3\66\3\0"+
    "\1\66\1\0\1\66\3\0\1\66\30\0\7\14\1\0"+
    "\61\14\7\15\1\0\61\15\1\0\3\4\4\0\2\4"+
    "\1\0\1\4\4\0\3\4\1\151\15\4\1\152\3\4"+
    "\25\0\3\4\4\0\2\4\1\0\1\4\4\0\2\4"+
    "\1\153\14\4\1\154\5\4\25\0\3\4\4\0\2\4"+
    "\1\0\1\4\4\0\23\4\1\155\1\4\25\0\3\4"+
    "\4\0\2\4\1\0\1\4\4\0\1\4\1\156\23\4"+
    "\25\0\3\4\4\0\2\4\1\0\1\4\4\0\10\4"+
    "\1\157\14\4\25\0\3\4\4\0\2\4\1\0\1\4"+
    "\4\0\11\4\1\160\13\4\25\0\3\4\4\0\2\4"+
    "\1\0\1\4\4\0\7\4\1\161\15\4\25\0\3\4"+
    "\4\0\2\4\1\0\1\4\4\0\2\4\1\162\22\4"+
    "\25\0\3\4\4\0\2\4\1\0\1\4\4\0\11\4"+
    "\1\163\13\4\25\0\3\4\4\0\2\4\1\0\1\4"+
    "\4\0\17\4\1\164\5\4\25\0\3\4\4\0\2\4"+
    "\1\0\1\4\4\0\7\4\1\165\15\4\25\0\3\4"+
    "\4\0\2\4\1\0\1\4\4\0\22\4\1\166\2\4"+
    "\25\0\3\4\4\0\2\4\1\0\1\4\4\0\4\4"+
    "\1\167\20\4\25\0\3\4\4\0\2\4\1\0\1\4"+
    "\4\0\1\4\1\170\6\4\1\171\14\4\25\0\3\4"+
    "\4\0\2\4\1\0\1\4\4\0\11\4\1\172\13\4"+
    "\25\0\3\4\4\0\2\4\1\0\1\4\4\0\10\4"+
    "\1\173\14\4\25\0\3\4\4\0\2\4\1\0\1\4"+
    "\4\0\5\4\1\174\17\4\25\0\3\4\4\0\2\4"+
    "\1\0\1\4\4\0\17\4\1\175\5\4\25\0\3\4"+
    "\4\0\2\4\1\0\1\4\4\0\1\4\1\176\23\4"+
    "\25\0\3\4\4\0\2\4\1\0\1\4\4\0\2\4"+
    "\1\177\22\4\25\0\3\4\4\0\2\4\1\0\1\4"+
    "\4\0\17\4\1\200\5\4\71\0\1\201\70\0\1\202"+
    "\70\0\1\203\70\0\1\204\3\0\1\205\17\0\6\146"+
    "\1\206\62\146\2\0\1\143\5\0\1\143\100\0\1\144"+
    "\16\0\1\144\31\0\5\145\1\146\1\207\1\146\6\145"+
    "\1\150\52\145\6\146\1\210\62\146\5\211\1\212\1\147"+
    "\1\213\6\211\1\214\52\211\6\145\1\207\1\146\6\145"+
    "\1\150\52\145\1\0\3\4\4\0\2\4\1\0\1\4"+
    "\4\0\4\4\1\215\20\4\25\0\3\4\4\0\2\4"+
    "\1\0\1\4\4\0\16\4\1\216\6\4\25\0\3\4"+
    "\4\0\2\4\1\0\1\4\4\0\10\4\1\217\14\4"+
    "\25\0\3\4\4\0\2\4\1\0\1\4\4\0\4\4"+
    "\1\220\20\4\25\0\3\4\4\0\2\4\1\0\1\4"+
    "\4\0\3\4\1\221\21\4\25\0\3\4\4\0\2\4"+
    "\1\0\1\4\4\0\4\4\1\222\20\4\25\0\3\4"+
    "\4\0\2\4\1\0\1\4\4\0\14\4\1\223\10\4"+
    "\25\0\3\4\4\0\2\4\1\0\1\4\4\0\10\4"+
    "\1\224\14\4\25\0\3\4\4\0\2\4\1\0\1\4"+
    "\4\0\6\4\1\225\16\4\25\0\3\4\4\0\2\4"+
    "\1\0\1\4\4\0\1\4\1\226\23\4\25\0\3\4"+
    "\4\0\2\4\1\0\1\4\4\0\7\4\1\227\15\4"+
    "\25\0\3\4\4\0\2\4\1\0\1\4\4\0\6\4"+
    "\1\230\16\4\25\0\3\4\4\0\2\4\1\0\1\4"+
    "\4\0\14\4\1\231\10\4\25\0\3\4\4\0\2\4"+
    "\1\0\1\4\4\0\4\4\1\232\20\4\25\0\3\4"+
    "\4\0\2\4\1\0\1\4\4\0\1\4\1\233\23\4"+
    "\25\0\3\4\4\0\2\4\1\0\1\4\4\0\1\4"+
    "\1\234\23\4\25\0\3\4\4\0\2\4\1\0\1\4"+
    "\4\0\6\4\1\235\16\4\25\0\3\4\4\0\2\4"+
    "\1\0\1\4\4\0\7\4\1\236\15\4\25\0\3\4"+
    "\4\0\2\4\1\0\1\4\4\0\15\4\1\237\7\4"+
    "\25\0\3\4\4\0\2\4\1\0\1\4\4\0\20\4"+
    "\1\240\4\4\71\0\1\241\23\0\5\213\1\242\1\206"+
    "\62\213\5\145\1\243\1\207\1\146\6\145\1\150\52\145"+
    "\5\146\1\244\1\210\62\146\5\211\1\213\1\245\1\213"+
    "\6\211\1\214\52\211\6\213\1\246\62\213\6\211\1\245"+
    "\1\213\6\211\1\214\52\211\1\0\3\4\4\0\2\4"+
    "\1\0\1\4\4\0\22\4\1\247\2\4\25\0\3\4"+
    "\4\0\2\4\1\0\1\4\4\0\16\4\1\250\6\4"+
    "\25\0\3\4\4\0\2\4\1\0\1\4\4\0\2\4"+
    "\1\251\22\4\25\0\3\4\4\0\2\4\1\0\1\4"+
    "\4\0\1\4\1\252\23\4\25\0\3\4\4\0\2\4"+
    "\1\0\1\4\4\0\4\4\1\253\20\4\25\0\3\4"+
    "\4\0\2\4\1\0\1\4\4\0\7\4\1\254\15\4"+
    "\25\0\3\4\4\0\2\4\1\0\1\4\4\0\14\4"+
    "\1\255\10\4\25\0\3\4\4\0\2\4\1\0\1\4"+
    "\4\0\13\4\1\256\11\4\25\0\3\4\4\0\2\4"+
    "\1\0\1\4\4\0\15\4\1\257\7\4\25\0\3\4"+
    "\4\0\2\4\1\0\1\4\4\0\17\4\1\260\5\4"+
    "\25\0\3\4\4\0\2\4\1\0\1\4\4\0\6\4"+
    "\1\261\16\4\25\0\3\4\4\0\2\4\1\0\1\4"+
    "\4\0\3\4\1\262\21\4\25\0\3\4\4\0\2\4"+
    "\1\0\1\4\4\0\4\4\1\263\20\4\24\0\5\211"+
    "\1\212\1\245\1\213\6\211\1\214\52\211\5\213\1\242"+
    "\1\246\62\213\1\0\3\4\4\0\2\4\1\0\1\4"+
    "\4\0\5\4\1\264\17\4\25\0\3\4\4\0\2\4"+
    "\1\0\1\4\4\0\11\4\1\265\13\4\25\0\3\4"+
    "\4\0\2\4\1\0\1\4\4\0\17\4\1\266\5\4"+
    "\25\0\3\4\4\0\2\4\1\0\1\4\4\0\7\4"+
    "\1\267\15\4\25\0\3\4\4\0\2\4\1\0\1\4"+
    "\4\0\15\4\1\270\7\4\25\0\3\4\4\0\2\4"+
    "\1\0\1\4\4\0\11\4\1\271\13\4\25\0\3\4"+
    "\4\0\2\4\1\0\1\4\4\0\11\4\1\272\13\4"+
    "\25\0\3\4\4\0\2\4\1\0\1\4\4\0\7\4"+
    "\1\273\15\4\25\0\3\4\4\0\2\4\1\0\1\4"+
    "\4\0\16\4\1\274\6\4\25\0\3\4\4\0\2\4"+
    "\1\0\1\4\4\0\21\4\1\275\3\4\25\0\3\4"+
    "\4\0\2\4\1\0\1\4\4\0\3\4\1\276\21\4"+
    "\25\0\3\4\4\0\2\4\1\0\1\4\4\0\14\4"+
    "\1\277\10\4\25\0\3\4\4\0\2\4\1\0\1\4"+
    "\4\0\1\4\1\300\23\4\25\0\3\4\4\0\2\4"+
    "\1\0\1\4\4\0\11\4\1\301\13\4\25\0\3\4"+
    "\4\0\2\4\1\0\1\4\4\0\4\4\1\302\20\4"+
    "\25\0\3\4\4\0\2\4\1\0\1\4\4\0\4\4"+
    "\1\303\20\4\25\0\3\4\4\0\2\4\1\0\1\4"+
    "\4\0\16\4\1\304\6\4\25\0\3\4\4\0\2\4"+
    "\1\0\1\4\4\0\5\4\1\305\17\4\24\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7752];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\37\1\13\11\7\1\1\11\1\1\3\11"+
    "\33\1\3\11\1\1\1\11\1\1\6\11\1\1\1\11"+
    "\36\1\4\11\3\1\1\0\30\1\2\11\1\1\1\11"+
    "\1\1\1\0\37\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[197];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = EMPTY_BUFFER;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  private IElementType myTokenType;
  private int myState;

  public _JavaScriptLexer(){
    this((java.io.Reader)null);
  }

  public final void start(char[] buffer){
    start(buffer, 0, buffer.length);
  }

  public final void start(char[] buffer, int startOffset, int endOffset){
    start(buffer, startOffset, endOffset, (short)YYINITIAL);
  }

  public final void start(char[] buffer, int startOffset, int endOffset, int initialState){
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = startOffset;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzEndRead = endOffset;
    myTokenType = null;
    yybegin(initialState);
  }

  public final int getState(){
    return myState;
  }

  public final int getLastState() {
    return 1;
  }

  public final IElementType getTokenType(){
    locateToken();
    return myTokenType;
  }

  public final int getTokenStart(){
    locateToken();
    return zzStartRead - zzPushbackPos;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public final void advance(){
    locateToken();
    myTokenType = null;
    myState = (short)yystate();
  }

  public final char[] getBuffer(){
    return zzBuffer;
  }

  public final int getBufferEnd(){
    return zzEndRead;
  }

  protected final void locateToken(){
    if (myTokenType != null) return;
    try{
    _locateToken();
    }
    catch(java.io.IOException ioe){}
  }

  public int getSmartUpdateShift() {
    return 10;
  }

  public Object clone() {
    try{
      return super.clone();
    }
    catch(CloneNotSupportedException e){
      return null;
    }
  }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  _JavaScriptLexer(java.io.Reader in) {
      myTokenType = null;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  _JavaScriptLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream
   */
  public final void yyreset(java.io.Reader reader) {
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public void _locateToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = zzLexicalState;


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ((int[])ZZ_ACTION)[zzAction]) {
        case 78:
          { yybegin(YYINITIAL); myTokenType = GroovyTokenTypes.RETURN_KEYWORD; return;
          }
        case 85: break;
        case 15:
          { yybegin(YYINITIAL); myTokenType = GroovyTokenTypes.AND; return;
          }
        case 86: break;
        case 8:
          { yybegin(YYINITIAL); myTokenType = GroovyTokenTypes.MINUS; return;
          }
        case 87: break;
        case 63:
          { yybegin(YYINITIAL); myTokenType = GroovyTokenTypes.GTGTGT; return;
          }
        case 88: break;
        case 55:
          { yybegin(YYINITIAL); myTokenType = GroovyTokenTypes.TRY_KEYWORD; return;
          }
        case 89: break;
        case 20:
          { yybegin(DIV);       myTokenType = GroovyTokenTypes.RPAR; return;
          }
        case 90: break;
        case 5:
          { myTokenType = GroovyTokenTypes.REGEXP_LITERAL; return;
          }
        case 91: break;
        case 37:
          { yybegin(YYINITIAL); myTokenType = GroovyTokenTypes.IN_KEYWORD; return;
          }
        case 92: break;
        case 11:
          { yybegin(YYINITIAL); myTokenType = GroovyTokenTypes.EXCL; return;
          }
        case 93: break;
        case 53:
          { yybegin(YYINITIAL); myTokenType = GroovyTokenTypes.DIVEQ; return;
          }
        case 94: break;
        case 51:
          { yybegin(YYINITIAL); myTokenType = GroovyTokenTypes.XOREQ; return;
          }
        case 95: break;
        case 68:
          { yybegin(YYINITIAL); myTokenType = GroovyTokenTypes.CASE_KEYWORD; return;
          }
        case 96: break;
        case 10:
          { yybegin(YYINITIAL); myTokenType = GroovyTokenTypes.EQ; return;
          }
        case 97: break;
        case 24:
          { yybegin(DIV);       myTokenType = GroovyTokenTypes.RBRACKET; return;
          }
        case 98: break;
        case 49:
          { yybegin(YYINITIAL); myTokenType = GroovyTokenTypes.OREQ; return;
          }
        case 99: break;
        case 57:
          { yybegin(YYINITIAL); myTokenType = GroovyTokenTypes.NEW_KEYWORD; return;
          }
        case 100: break;
        case 27:
          { yybegin(YYINITIAL); myTokenType = GroovyTokenTypes.TILDE; return;
          }
        case 101: break;
        case 41:
          { yybegin(YYINITIAL); myTokenType = GroovyTokenTypes.PLUSEQ; return;
          }
        case 102: break;
        case 9:
          { yybegin(DIV); myTokenType = GroovyTokenTypes.STRING_LITERAL; return;
          }
        case 103: break;
        case 21:
          { yybegin(YYINITIAL); myTokenType = GroovyTokenTypes.LBRACE; return;
          }
        case 104: break;
        case 54:
          { myTokenType = GroovyTokenTypes.DOC_COMMENT; return;
          }
        case 105: break;
        case 61:
          { yybegin(YYINITIAL); myTokenType = GroovyTokenTypes.LTLTEQ; return;
          }
        case 106: break;
        case 18:
          { yybegin(YYINITIAL); myTokenType = GroovyTokenTypes.PERC; return;
          }
        case 107: break;
        case 3:
          { yybegin(DIV); myTokenType = GroovyTokenTypes.NUMERIC_LITERAL; return;
          }
        case 108: break;
        case 1:
          { yybegin(YYINITIAL); myTokenType = GroovyTokenTypes.BAD_CHARACTER; return;
          }
        case 109: break;
        case 73:
          { yybegin(DIV); myTokenType = GroovyTokenTypes.FALSE_KEYWORD; return;
          }
        case 110: break;
        case 17:
          { yybegin(YYINITIAL); myTokenType = GroovyTokenTypes.XOR; return;
          }
        case 111: break;
        case 26:
          { yybegin(YYINITIAL); myTokenType = GroovyTokenTypes.COMMA; return;
          }
        case 112: break;
        case 25:
          { yybegin(YYINITIAL); myTokenType = GroovyTokenTypes.SEMICOLON; return;
          }
        case 113: break;
        case 58:
          { yybegin(YYINITIAL); myTokenType = GroovyTokenTypes.VAR_KEYWORD; return;
          }
        case 114: break;
        case 77:
          { yybegin(YYINITIAL); myTokenType = GroovyTokenTypes.TYPEOF_KEYWORD; return;
          }
        case 115: break;
        case 40:
          { yybegin(YYINITIAL); myTokenType = GroovyTokenTypes.NE; return;
          }
        case 116: break;
        case 30:
          { yybegin(YYINITIAL); myTokenType = GroovyTokenTypes.DIV; return;
          }
        case 117: break;
        case 22:
          { yybegin(YYINITIAL); myTokenType = GroovyTokenTypes.RBRACE; return;
          }
        case 118: break;
        case 69:
          { yybegin(YYINITIAL); myTokenType = GroovyTokenTypes.WITH_KEYWORD; return;
          }
        case 119: break;
        case 31:
          { myTokenType = GroovyTokenTypes.END_OF_LINE_COMMENT; return;
          }
        case 120: break;
        case 35:
          { yybegin(YYINITIAL); myTokenType = GroovyTokenTypes.MINUSEQ; return;
          }
        case 121: break;
        case 4:
          { myTokenType = GroovyTokenTypes.WHITE_SPACE; return;
          }
        case 122: break;
        case 42:
          { yybegin(YYINITIAL); myTokenType = GroovyTokenTypes.PLUSPLUS; return;
          }
        case 123: break;
        case 83:
          { yybegin(YYINITIAL); myTokenType = GroovyTokenTypes.CONTINUE_KEYWORD; return;
          }
        case 124: break;
        case 84:
          { yybegin(YYINITIAL); myTokenType = GroovyTokenTypes.INSTANCEOF_KEYWORD; return;
          }
        case 125: break;
        case 82:
          { yybegin(YYINITIAL); myTokenType = GroovyTokenTypes.FUNCTION_KEYWORD; return;
          }
        case 126: break;
        case 52:
          { yybegin(YYINITIAL); myTokenType = GroovyTokenTypes.PERCEQ; return;
          }
        case 127: break;
        case 14:
          { yybegin(YYINITIAL); myTokenType = GroovyTokenTypes.GT; return;
          }
        case 128: break;
        case 47:
          { yybegin(YYINITIAL); myTokenType = GroovyTokenTypes.ANDEQ; return;
          }
        case 129: break;
        case 6:
          { yybegin(YYINITIAL); myTokenType = GroovyTokenTypes.MULT; return;
          }
        case 130: break;
        case 19:
          { yybegin(YYINITIAL); myTokenType = GroovyTokenTypes.LPAR; return;
          }
        case 131: break;
        case 66:
          { yybegin(YYINITIAL); myTokenType = GroovyTokenTypes.ELSE_KEYWORD; return;
          }
        case 132: break;
        case 65:
          { yybegin(DIV);       myTokenType = GroovyTokenTypes.THIS_KEYWORD; return;
          }
        case 133: break;
        case 80:
          { yybegin(YYINITIAL); myTokenType = GroovyTokenTypes.FINALLY_KEYWORD; return;
          }
        case 134: break;
        case 43:
          { yybegin(YYINITIAL); myTokenType = GroovyTokenTypes.LE; return;
          }
        case 135: break;
        case 32:
          { myTokenType = GroovyTokenTypes.C_STYLE_COMMENT; return;
          }
        case 136: break;
        case 13:
          { yybegin(YYINITIAL); myTokenType = GroovyTokenTypes.LT; return;
          }
        case 137: break;
        case 60:
          { yybegin(YYINITIAL); myTokenType = GroovyTokenTypes.NEQEQ; return;
          }
        case 138: break;
        case 81:
          { yybegin(YYINITIAL); myTokenType = GroovyTokenTypes.DEFAULT_KEYWORD; return;
          }
        case 139: break;
        case 12:
          { yybegin(YYINITIAL); myTokenType = GroovyTokenTypes.PLUS; return;
          }
        case 140: break;
        case 79:
          { yybegin(YYINITIAL); myTokenType = GroovyTokenTypes.SWITCH_KEYWORD; return;
          }
        case 141: break;
        case 7:
          { yybegin(YYINITIAL); myTokenType = GroovyTokenTypes.DOT; return;
          }
        case 142: break;
        case 45:
          { yybegin(YYINITIAL); myTokenType = GroovyTokenTypes.GE; return;
          }
        case 143: break;
        case 48:
          { yybegin(YYINITIAL); myTokenType = GroovyTokenTypes.ANDAND; return;
          }
        case 144: break;
        case 16:
          { yybegin(YYINITIAL); myTokenType = GroovyTokenTypes.OR; return;
          }
        case 145: break;
        case 75:
          { yybegin(YYINITIAL); myTokenType = GroovyTokenTypes.CATCH_KEYWORD; return;
          }
        case 146: break;
        case 38:
          { yybegin(YYINITIAL); myTokenType = GroovyTokenTypes.DO_KEYWORD; return;
          }
        case 147: break;
        case 64:
          { yybegin(DIV); myTokenType = GroovyTokenTypes.TRUE_KEYWORD; return;
          }
        case 148: break;
        case 76:
          { yybegin(YYINITIAL); myTokenType = GroovyTokenTypes.WHILE_KEYWORD; return;
          }
        case 149: break;
        case 33:
          { yybegin(YYINITIAL); myTokenType = GroovyTokenTypes.MULTEQ; return;
          }
        case 150: break;
        case 62:
          { yybegin(YYINITIAL); myTokenType = GroovyTokenTypes.GTGTEQ; return;
          }
        case 151: break;
        case 59:
          { yybegin(YYINITIAL); myTokenType = GroovyTokenTypes.EQEQEQ; return;
          }
        case 152: break;
        case 34:
          { yybegin(YYINITIAL); myTokenType = GroovyTokenTypes.MINUSMINUS; return;
          }
        case 153: break;
        case 50:
          { yybegin(YYINITIAL); myTokenType = GroovyTokenTypes.OROR; return;
          }
        case 154: break;
        case 29:
          { yybegin(YYINITIAL); myTokenType = GroovyTokenTypes.COLON; return;
          }
        case 155: break;
        case 46:
          { yybegin(YYINITIAL); myTokenType = GroovyTokenTypes.GTGT; return;
          }
        case 156: break;
        case 67:
          { yybegin(DIV); myTokenType = GroovyTokenTypes.NULL_KEYWORD; return;
          }
        case 157: break;
        case 44:
          { yybegin(YYINITIAL); myTokenType = GroovyTokenTypes.LTLT; return;
          }
        case 158: break;
        case 72:
          { yybegin(YYINITIAL); myTokenType = GroovyTokenTypes.THROW_KEYWORD; return;
          }
        case 159: break;
        case 74:
          { yybegin(YYINITIAL); myTokenType = GroovyTokenTypes.BREAK_KEYWORD; return;
          }
        case 160: break;
        case 70:
          { yybegin(YYINITIAL); myTokenType = GroovyTokenTypes.VOID_KEYWORD; return;
          }
        case 161: break;
        case 39:
          { yybegin(YYINITIAL); myTokenType = GroovyTokenTypes.EQEQ; return;
          }
        case 162: break;
        case 36:
          { yybegin(YYINITIAL); myTokenType = GroovyTokenTypes.IF_KEYWORD; return;
          }
        case 163: break;
        case 2:
          { yybegin(DIV);       myTokenType = GroovyTokenTypes.IDENTIFIER; return;
          }
        case 164: break;
        case 28:
          { yybegin(YYINITIAL); myTokenType = GroovyTokenTypes.QUEST; return;
          }
        case 165: break;
        case 71:
          { yybegin(YYINITIAL); myTokenType = GroovyTokenTypes.GTGTGTEQ; return;
          }
        case 166: break;
        case 56:
          { yybegin(YYINITIAL); myTokenType = GroovyTokenTypes.FOR_KEYWORD; return;
          }
        case 167: break;
        case 23:
          { yybegin(YYINITIAL); myTokenType = GroovyTokenTypes.LBRACKET; return;
          }
        case 168: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
