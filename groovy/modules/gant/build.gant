//  Gant -- A Groovy build tool based on scripting Ant tasks
//
//  Copyright Â© 2006 Russel Winder <russel@russel.org.uk>
//
//  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in
//  compliance with the License. You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software distributed under the License is
//  distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
//  implied. See the License for the specific language governing permissions and limitations under the
//  License.
//
//  Author : Russel Winder
//  $Revision$
//  $Date$

groovyHome = System.getenv ( ).'GROOVY_HOME'

if ( ( groovyHome == null ) || ( groovyHome == '' ) ) {
  println ( 'Must set environment variable GROOVY_HOME to compile Gant.' )
  return
}

version = new File ( 'VERSION.txt' ).text.trim ( )

sourceDirectory = 'source'
testsDirectory = 'tests'  
jarsDirectory = 'jarfiles'
buildDirectory = 'build'
buildClassesDirectory = buildDirectory + '/classes' 
buildTestsDirectory = buildDirectory + '/tests' 
buildLibDirectory = buildDirectory + '/lib'
buildReportsDirectory = buildDirectory + '/reports'

distributionTopLevelFiles = [
                              'build.gant' , 'VERSION.txt' ,
                              '.classpath' , '.project' ,
                              'lgpl.txt' , 'licence.txt' ,
                              'README_Distribution.txt' , 'README_Install.txt'
                              ]
distributionDirectories = [ 'documentation' , 'examples' , '.settings' , sourceDirectory , testsDirectory ]

includeTargets << new File ( 'source/org/codehaus/groovy/gant/targets/clean.gant' )
cleanPattern <<  '**/*~' 
clobberDirectory << buildDirectory

Ant.path ( id : 'groovyJarSet' ) { fileset ( dir : groovyHome + '/lib' , includes : '*.jar' ) }
Ant.taskdef ( name : 'groovyc' , classname : 'org.codehaus.groovy.ant.Groovyc' , classpathref : 'groovyJarSet' )

task ( initialize : 'Initialize prior to a build' ) {
  Ant.mkdir ( dir : buildClassesDirectory )
  Ant.mkdir ( dir : buildTestsDirectory )
  Ant.mkdir ( dir : buildLibDirectory )
  Ant.mkdir ( dir : buildReportsDirectory )
}

task ( compile : 'Compile everything needed.' ) {
  depends ( initialize )
  Ant.javac ( srcdir : sourceDirectory , destDir : buildClassesDirectory , source : '1.4' , target : '1.4' , debug : 'on' , classpathref : 'groovyJarSet' )
  Ant.groovyc ( srcdir : sourceDirectory , destDir : buildClassesDirectory , classpath : buildClassesDirectory , excludes : 'bin/*.groovy' )
  Ant.jar ( destfile : buildLibDirectory + "/gant-${version}.jar" , basedir : buildClassesDirectory , includes : 'org/**' )
}

task ( compileTests : 'Compile all the tests.' ) {
  depends ( compile )
  Ant.javac ( srcdir : testsDirectory , destDir : buildTestsDirectory , source : '1.4' , target : '1.4' , debug : 'on' ) {
    classpath {
      path ( refid : 'groovyJarSet' )
      pathelement ( location : buildClassesDirectory )
    }
  }
  Ant.groovyc ( srcdir : testsDirectory , destdir : buildTestsDirectory ) {
    classpath {
      pathelement ( location : buildTestsDirectory )
      pathelement ( location : buildClassesDirectory )
    }
  }
}

task ( test : 'Test a build.' ) {
  depends ( compileTests )
  Ant.junit ( printsummary : 'yes' ) {
    formatter ( type : 'plain' )
    batchtest ( fork : 'yes' , todir : buildReportsDirectory ) {
      fileset ( dir : buildTestsDirectory , includes : '**/*_Test.class' )
    }
    classpath {
      pathelement ( location : buildTestsDirectory )
      pathelement ( location : buildClassesDirectory )
      path ( refid : 'groovyJarSet' )
    }
  }
}

task ( install : "Compile everything and install it to ${groovyHome}" ) {
  depends ( compile )
  Ant.copy ( todir : groovyHome ) {
    fileset ( dir : sourceDirectory , includes : 'bin/gant*' )
    fileset ( dir : buildDirectory , includes : 'lib/gant*.jar' )
  }
  Ant.copy ( todir : groovyHome + '/lib' ) { fileset ( dir : jarsDirectory , includes : 'ivy*.jar' ) }
  Ant.chmod ( perm : 'a+x' ) { fileset ( dir : groovyHome + '/bin' , includes : 'gant*' ) }
}

task ( 'package' : 'Create the distribution.' ) {
  depends ( compile ) 
  def prefix = "gant-${version}"
  def archiveRoot = "${buildDirectory}/gant-${version}"
  Ant.zip ( destfile : "${archiveRoot}.zip" ) {
    zipfileset ( dir : buildDirectory , includes : 'lib/gant*.jar' , prefix : prefix )
    zipfileset ( dir : sourceDirectory , includes : 'bin/gant*,bin/install.groovy' , prefix : prefix )
    zipfileset ( dir : '.' , includes : 'README*' , prefix : prefix )
  }
  Ant.tar ( destfile :  "${archiveRoot}.tgz" , compression : 'gzip' ) {
    tarfileset ( dir : buildDirectory , includes : 'lib/gant*.jar' , prefix : prefix )
    tarfileset ( dir : sourceDirectory , includes : 'bin/gant*,bin/install.groovy' , prefix : prefix , mode : '755' )
    tarfileset ( dir : '.' , includes : 'README*' , prefix : prefix )
  }
  archiveRoot = "${buildDirectory}/gant_src-${version}"
  Ant.zip ( destfile : "${archiveRoot}.zip" ) {
    zipfileset ( dir : buildDirectory , includes : 'lib/gant*.jar' , prefix : prefix )
    zipfileset ( dir : '.' , includes : distributionTopLevelFiles.join ( ',' ) , prefix : prefix )
    distributionDirectories.each { directory -> zipfileset ( dir : directory , prefix : "${prefix}/${directory}" ) }
  }
  Ant.tar ( destfile :  "${archiveRoot}.tgz" , compression : 'gzip' ) {
    tarfileset ( dir : buildDirectory , includes : 'lib/gant*.jar' , prefix : prefix )
    tarfileset ( dir : '.' , includes : distributionTopLevelFiles.join ( ',' ) , prefix : prefix )
    distributionDirectories.each { directory -> tarfileset ( dir : directory , prefix : "${prefix}/${directory}" ) }
  }
} 

task ( 'default' : 'The default target, currently test.' ) { test ( ) }
